name: rusttest

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, nightly]

    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@master
      with:
        rust-version: ${{ matrix.rust }}
    - name: Build
      run: cargo build --verbose
    - name: Run tests stable
      if: matrix.rust == 'stable'
      run: cargo test --verbose
    - name: Run tests nightly with coverage
      if: matrix.rust == 'nightly' 
      env:
        CARGO_INCREMENTAL: 0
        RUSTFLAGS: -Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort
        RUSTDOCFLAGS: -Cpanic=abort
        CRATE_NAME: hull_white
      run: |
        cargo build --verbose $CARGO_OPTIONS
        cargo test --verbose $CARGO_OPTIONS
        curl -L https://github.com/mozilla/grcov/releases/download/v0.7.1/grcov-linux-x86_64.tar.bz2 | tar jxf -
        zip -0 ccov.zip `find . \( -name "${CRATE_NAME}*.gc*" \) -print`
        ./grcov ccov.zip -s . -t lcov --llvm --branch --ignore-not-existing --ignore "/*" -o lcov.info
        bash <(curl -s https://codecov.io/bash) -f lcov.info -t ${{ secrets.CODECOV_TOKEN }}
    - name: Document 
      run: cargo doc
    - name: Coveralls
      if: matrix.rust == 'nightly' 
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: "lcov.info"
  
  bench:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: hecrj/setup-rust-action@master
      with:
        rust-version: nightly

    - name: benchmark
      run: cargo bench | tee output.txt

    - name: Download previous benchmark data
      uses: actions/cache@v1
      with:
        path: ./cache
        key: ${{ runner.os }}-benchmark
    # Run `github-action-benchmark` action
    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        # What benchmark tool the output.txt came from
        tool: 'cargo'
        # Where the output from the benchmark tool is stored
        output-file-path: output.txt
        # Where the previous data file is stored
        external-data-json-path: ./cache/benchmark-data.json
        # Workflow will fail when an alert happens
        fail-on-alert: true
        comment-on-alert: true
        alert-threshold: '200%'


    
    